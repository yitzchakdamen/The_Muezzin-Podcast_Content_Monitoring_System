import os
import logging
import json


logger = logging.getLogger(__name__)

# ___ General Configuration ___
LOGGER_NAME = os.getenv("LOGGER_NAME", "podcast_content_monitoring_system")
PODCAST_FILES_PATH = os.getenv("PODCAST_FILES_PATH", r"data\podcasts")

# ___KAFKA Configuration ___ 
BOOTSTRAP_SERVERS = os.getenv("BOOTSTRAP_SERVERS", "localhost:9092")
KAFKA_TOPIC_FILE_METADATA = os.getenv("KAFKA_TOPIC_FILE_METADATA", "file-metadata")
KAFKA_TOPIC_INCOME_PROCESSING = os.getenv("KAFKA_TOPIC_INCOME_PROCESSING", "icome-processing")
KAFKA_TOPIC_TRANSCRIPTTION = os.getenv("KAFKA_TOPIC_TRANSCRIPTTION", "file-transcribe")
KAFKA_GROUP_ID_FILE_METADATA = os.getenv("KAFKA_GROUP_ID_FILE_METADATA", "information_consumption_processing")
KAFKA_GROUP_ID_INCOME_PROCESSING = os.getenv("KAFKA_GROUP_ID_INCOME_PROCESSING", "icome-processing")
KAFKA_GROUP_ID_TRANSCRIPTTION = os.getenv("KAFKA_GROUP_ID_TRANSCRIPTTION", "file-transcribe")

# ___ ELASTICSEARCH Configuration ___ 
ELASTICSEARCH_HOST = os.getenv("ELASTICSEARCH_HOST", "http://localhost:9200")
ELASTICSEARCH_INDEX = os.getenv("ELASTICSEARCH_INDEX", "audio_files-metadata")
ELASTICSEARCH_INDEX_TRANSCRIPTTION = os.getenv("ELASTICSEARCH_INDEX_TRANSCRIPTTION", "audio_files-transcription")
ELASTICSEARCH_INDEX_LOG = os.getenv("ELASTICSEARCH_INDEX_LOG", "loggin")
ELASTICSEARCH_MAPPING_PATH = os.getenv("ELASTICSEARCH_MAPPING_PATH", r"config\elasticsearch_mapping.json")
ELASTICSEARCH_MAPPING_TRANSCRIPTTION = os.getenv("ELASTICSEARCH_MAPPING_TRANSCRIPTTION_PATH", r"config\elasticsearch_mapping_transcription.json")
with open(ELASTICSEARCH_MAPPING_PATH) as f: ELASTICSEARCH_MAPPING = json.load(f)
with open(ELASTICSEARCH_MAPPING_TRANSCRIPTTION) as f: ELASTICSEARCH_MAPPING_TRANSCRIPTTION = json.load(f)


# ___ MONGO Configuration ___ 
MONGO_CLIENT_STRING = os.getenv("MONGO_CLIENT_STRING", "mongodb://localhost:27017")
MONGO_DB = os.getenv("MONGO_DB", "podcast_files")
MONGO_COLLECTION = os.getenv("MONGO_COLLECTION", "audio_files")

# ___ text_analysis_service Configuration ___ 
HOSTILE_TEXT =  os.getenv("HOSTILE_TEXT", "RnJlZWRvbSBGbG90aWxsYSxSZXNpc3RhbmNlLExpYmVyYXRpb24sRnJlZSBQYWxlc3RpbmUsR2F6YSxDZWFzZWZpcmUsUHJvdGVzdCxVTlJXQQ==")
LESS_HOSTILE_TEXT =  os.getenv("LESS_HOSTILE_TEXT", "R2Vub2NpZGUsV2FyIENyaW1lcyxBcGFydGhlaWQsTWFzc2FjcmUsTmFrYmEsRGlzcGxhY2VtZW50LEh1bWFuaXRhcmlhbiBDcmlzaXMsQmxvY2thZGUsT2NjdXBhdGlvbixSZWZ1Z2VlcyxJQ0MsQkRT")
HIGH_DANGER_LEVEL = float(os.getenv("HIGH_DANGER_LEVEL",10))
MEDIUM_DANGER_LEVEL = float(os.getenv("MEDIUM_DANGER_LEVEL",5))
THRESHOLD = float(os.getenv("THRESHOLD",7.5))

# ___ API_ENDPOINT_SERVICE Configuration ___
APP_HOST = os.getenv("APP_HOST", "localhost")
APP_PORT = int(os.getenv("APP_PORT", 8000))

logger.info(f"""
            Configuration Loaded ___ :
            LOGGER_NAME: {LOGGER_NAME}
            PODCAST_FILES_PATH: {PODCAST_FILES_PATH}
            BOOTSTRAP_SERVERS: {BOOTSTRAP_SERVERS}
            KAFKA_TOPIC_FILE_METADATA: {KAFKA_TOPIC_FILE_METADATA}
            KAFKA_GROUP_ID_FILE_METADATA: {KAFKA_GROUP_ID_FILE_METADATA}
            KAFKA_TOPIC_INCOME_PROCESSING: {KAFKA_TOPIC_INCOME_PROCESSING}
            KAFKA_GROUP_ID_INCOME_PROCESSING: {KAFKA_GROUP_ID_INCOME_PROCESSING}
            KAFKA_TOPIC_TRANSCRIPTTION: {KAFKA_TOPIC_TRANSCRIPTTION}
            KAFKA_GROUP_ID_TRANSCRIPTTION: {KAFKA_GROUP_ID_TRANSCRIPTTION}
            ELASTICSEARCH_HOST: {ELASTICSEARCH_HOST}
            ELASTICSEARCH_INDEX: {ELASTICSEARCH_INDEX}
            ELASTICSEARCH_INDEX_TRANSCRIPTTION: {ELASTICSEARCH_INDEX_TRANSCRIPTTION}
            ELASTICSEARCH_INDEX_LOG: {ELASTICSEARCH_INDEX_LOG}
            ELASTICSEARCH_MAPPING_PATH: {ELASTICSEARCH_MAPPING_PATH}
            MONGO_CLIENT_STRING: {MONGO_CLIENT_STRING}
            MONGO_DB: {MONGO_DB}
            MONGO_COLLECTION: {MONGO_COLLECTION}
            HOSTILE_TEXT: {HOSTILE_TEXT}
            LESS_HOSTILE_TEXT: {LESS_HOSTILE_TEXT}
            HIGH_DANGER_LEVEL: {HIGH_DANGER_LEVEL}
            MEDIUM_DANGER_LEVEL: {MEDIUM_DANGER_LEVEL}
            THRESHOLD: {THRESHOLD}
            APP_HOST: {APP_HOST}
            APP_PORT: {APP_PORT}
            """)